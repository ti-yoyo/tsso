# CAS Server Context Configuration
server.context-path=/cas
server.port=8888
server.tomcat.uri-encoding=UTF-8
spring.http.encoding.charset=UTF-8
spring.http.encoding.enabled=true
spring.http.encoding.force=true
#cas.properties
cas.server.name=http://cas.example.org:8888
cas.server.prefix=http://cas.example.org:8888/cas
cas.adminPagesSecurity.ip=127.0.0.1
#不启用https
server.ssl.enabled=false
##
# CAS AspectJ Configuration
spring.aop.auto=true
spring.aop.proxy-target-class=true
##
#当启用该配置时，为默认静态认证，登陆名为ideal密码为ideal
#cas.authn.accept.users=lizheng::lizheng
#从json文件初始化service
cas.serviceRegistry.initFromJson=false
cas.serviceRegistry.config.location=classpath:/services
#不显示hibernate的sql语句
cas.jdbc.showSql=false
#############ticket registry##################
cas.ticket.registry.jpa.jpaLockingTimeout=3600
cas.ticket.registry.jpa.healthQuery=SELECT 1
cas.ticket.registry.jpa.isolateInternalQueries=false
cas.ticket.registry.jpa.url=jdbc:postgresql://172.16.203.105:5432/cas
cas.ticket.registry.jpa.failFast=true
cas.ticket.registry.jpa.dialect=org.hibernate.dialect.PostgreSQLDialect
cas.ticket.registry.jpa.jpaLockingTgtEnabled=false
cas.ticket.registry.jpa.batchSize=1
cas.ticket.registry.jpa.user=postgres
#ddlAuto=create：表示启动的时候先drop，再create
#ddlAuto=create-drop: 也表示创建，只不过再系统关闭前执行一下drop
#ddlAuto=update: 这个操作启动的时候会去检查schema是否一致，如果不一致会做scheme更新
#ddlAuto=validate: 启动时验证现有schema与你配置的hibernate是否一致，如果不一致就抛出异常，并不做更新
cas.ticket.registry.jpa.ddlAuto=update
cas.ticket.registry.jpa.password=postgres
cas.ticket.registry.jpa.autocommit=true
cas.ticket.registry.jpa.driverClass=org.postgresql.Driver
######service registry##################
cas.serviceRegistry.jpa.healthQuery=SELECT 1
cas.serviceRegistry.jpa.isolateInternalQueries=false
cas.serviceRegistry.jpa.url=jdbc:postgresql://172.16.203.105:5432/cas
cas.serviceRegistry.jpa.failFast=true
cas.serviceRegistry.jpa.dialect=org.hibernate.dialect.PostgreSQLDialect
cas.serviceRegistry.jpa.user=postgres
cas.serviceRegistry.jpa.ddlAuto=create
cas.serviceRegistry.jpa.password=postgres
cas.serviceRegistry.jpa.autocommit=true
cas.serviceRegistry.jpa.driverClass=org.postgresql.Driver
#query方式配置数据库认证
#我们这里同时把password和salt查出来，用于在自定义的PasswordEncoder里进行加密
cas.authn.jdbc.query[0].sql=select password || ',' || password_salt as password from "user" where username=?
cas.authn.jdbc.query[0].healthQuery=select 1 
cas.authn.jdbc.query[0].isolateInternalQueries=false
cas.authn.jdbc.query[0].url=jdbc:postgresql://172.16.203.105:5432/cas
cas.authn.jdbc.query[0].failFast=true
cas.authn.jdbc.query[0].isolationLevelName=ISOLATION_READ_COMMITTED
cas.authn.jdbc.query[0].dialect=org.hibernate.dialect.PostgreSQLDialect
cas.authn.jdbc.query[0].leakThreshold=10
cas.authn.jdbc.query[0].propagationBehaviorName=PROPAGATION_REQUIRED
cas.authn.jdbc.query[0].batchSize=1
cas.authn.jdbc.query[0].user=postgres
cas.authn.jdbc.query[0].ddlAuto=none
cas.authn.jdbc.query[0].maxAgeDays=180
cas.authn.jdbc.query[0].password=postgres
cas.authn.jdbc.query[0].autocommit=false
cas.authn.jdbc.query[0].driverClass=org.postgresql.Driver
cas.authn.jdbc.query[0].idleTimeout=5000
cas.authn.jdbc.query[0].fieldPassword=password
#使用我们自定义的PasswordEncoder
cas.authn.jdbc.query[0].passwordEncoder.type=com.tinet.tsso.cas.encoder.TssoPasswordEncoder
cas.authn.jdbc.query[0].passwordEncoder.characterEncoding=UTF-8
#多属性返回
cas.authn.attributeRepository.jdbc[0].singleRow=true
cas.authn.attributeRepository.jdbc[0].order=0
cas.authn.attributeRepository.jdbc[0].url=jdbc:postgresql://172.16.203.105:5432/cas
cas.authn.attributeRepository.jdbc[0].username=username
cas.authn.attributeRepository.jdbc[0].user=postgres
cas.authn.attributeRepository.jdbc[0].password=postgres
# 查询某个用户的用户名，所有角色（逗号分隔），所有权限（逗号分隔）
cas.authn.attributeRepository.jdbc[0].sql=select username,string_agg(DISTINCT role.key,',') as roles,string_agg\
  (DISTINCT permission.key,',') as permissions from "user" left join user_role on "user".id=user_role.user_id left join role on user_role.role_id=role.id left join role_permisssion on role_permisssion.role_id=role.id left join permission on role_permisssion.permission_id=permission.id where username = ? and "user".status=1 and role.status=1 group by username;
#取消以下两行则在返回属性中仅包含表中的这两个字段属性，注释情况下返回该表行所有属性
#cas.authn.attributeRepository.jdbc[0].attributes.id=id
#cas.authn.attributeRepository.jdbc[0].attributes.name=name
cas.authn.attributeRepository.jdbc[0].attributes.roles=roles
cas.authn.attributeRepository.jdbc[0].attributes.permissions=permissions
cas.authn.attributeRepository.jdbc[0].dialect=org.hibernate.dialect.PostgreSQLDialect
cas.authn.attributeRepository.jdbc[0].ddlAuto=none
cas.authn.attributeRepository.jdbc[0].driverClass=org.postgresql.Driver
cas.authn.attributeRepository.jdbc[0].leakThreshold=10
cas.authn.attributeRepository.jdbc[0].propagationBehaviorName=PROPAGATION_REQUIRED
cas.authn.attributeRepository.jdbc[0].batchSize=1
cas.authn.attributeRepository.jdbc[0].healthQuery=SELECT 1
cas.authn.attributeRepository.jdbc[0].failFast=true


